============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.0.1, pluggy-1.4.0
rootdir: /Users/daniedagot/Downloads/sympoly-assignment
plugins: asyncio-0.23.5, bdd-7.0.1, anyio-4.2.0
asyncio: mode=Mode.STRICT
collected 1 item

tests/test_api.py F

=================================== FAILURES ===================================
___________________________ test_populate_must_work ____________________________

client_test = <async_generator object client_test at 0x104efe420>

    @pytest.mark.asyncio
    async def test_populate_must_work(client_test):
        # Assuming the fixture correctly sets up and yields an AsyncClient instance
        client = await client_test.__anext__()
>       response = await client.get("")

tests/test_api.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../Library/Caches/pypoetry/virtualenvs/sympoly-assignment-umcUDZET-py3.12/lib/python3.12/site-packages/httpx/_client.py:1801: in get
    return await self.request(
../../Library/Caches/pypoetry/virtualenvs/sympoly-assignment-umcUDZET-py3.12/lib/python3.12/site-packages/httpx/_client.py:1574: in request
    return await self.send(request, auth=auth, follow_redirects=follow_redirects)
../../Library/Caches/pypoetry/virtualenvs/sympoly-assignment-umcUDZET-py3.12/lib/python3.12/site-packages/httpx/_client.py:1661: in send
    response = await self._send_handling_auth(
../../Library/Caches/pypoetry/virtualenvs/sympoly-assignment-umcUDZET-py3.12/lib/python3.12/site-packages/httpx/_client.py:1689: in _send_handling_auth
    response = await self._send_handling_redirects(
../../Library/Caches/pypoetry/virtualenvs/sympoly-assignment-umcUDZET-py3.12/lib/python3.12/site-packages/httpx/_client.py:1726: in _send_handling_redirects
    response = await self._send_single_request(request)
../../Library/Caches/pypoetry/virtualenvs/sympoly-assignment-umcUDZET-py3.12/lib/python3.12/site-packages/httpx/_client.py:1763: in _send_single_request
    response = await transport.handle_async_request(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <httpx.ASGITransport object at 0x104f593d0>
request = <Request('GET', 'http://test/')>

    async def handle_async_request(
        self,
        request: Request,
    ) -> Response:
        assert isinstance(request.stream, AsyncByteStream)
    
        # ASGI scope.
        scope = {
            "type": "http",
            "asgi": {"version": "3.0"},
            "http_version": "1.1",
            "method": request.method,
            "headers": [(k.lower(), v) for (k, v) in request.headers.raw],
            "scheme": request.url.scheme,
            "path": request.url.path,
            "raw_path": request.url.raw_path.split(b"?")[0],
            "query_string": request.url.query,
            "server": (request.url.host, request.url.port),
            "client": self.client,
            "root_path": self.root_path,
        }
    
        # Request.
        request_body_chunks = request.stream.__aiter__()
        request_complete = False
    
        # Response.
        status_code = None
        response_headers = None
        body_parts = []
        response_started = False
        response_complete = create_event()
    
        # ASGI callables.
    
        async def receive() -> dict[str, typing.Any]:
            nonlocal request_complete
    
            if request_complete:
                await response_complete.wait()
                return {"type": "http.disconnect"}
    
            try:
                body = await request_body_chunks.__anext__()
            except StopAsyncIteration:
                request_complete = True
                return {"type": "http.request", "body": b"", "more_body": False}
            return {"type": "http.request", "body": body, "more_body": True}
    
        async def send(message: dict[str, typing.Any]) -> None:
            nonlocal status_code, response_headers, response_started
    
            if message["type"] == "http.response.start":
                assert not response_started
    
                status_code = message["status"]
                response_headers = message.get("headers", [])
                response_started = True
    
            elif message["type"] == "http.response.body":
                assert not response_complete.is_set()
                body = message.get("body", b"")
                more_body = message.get("more_body", False)
    
                if body and request.method != "HEAD":
                    body_parts.append(body)
    
                if not more_body:
                    response_complete.set()
    
        try:
>           await self.app(scope, receive, send)
E           TypeError: 'coroutine' object is not callable

../../Library/Caches/pypoetry/virtualenvs/sympoly-assignment-umcUDZET-py3.12/lib/python3.12/site-packages/httpx/_transports/asgi.py:164: TypeError
=============================== warnings summary ===============================
../../Library/Caches/pypoetry/virtualenvs/sympoly-assignment-umcUDZET-py3.12/lib/python3.12/site-packages/beanie/odm/fields.py:584
  /Users/daniedagot/Library/Caches/pypoetry/virtualenvs/sympoly-assignment-umcUDZET-py3.12/lib/python3.12/site-packages/beanie/odm/fields.py:584: DeprecationWarning: `general_plain_validator_function` is deprecated, use `with_info_plain_validator_function` instead.
    return core_schema.general_plain_validator_function(validate)

../../Library/Caches/pypoetry/virtualenvs/sympoly-assignment-umcUDZET-py3.12/lib/python3.12/site-packages/pydantic_core/core_schema.py:3953
../../Library/Caches/pypoetry/virtualenvs/sympoly-assignment-umcUDZET-py3.12/lib/python3.12/site-packages/pydantic_core/core_schema.py:3953
../../Library/Caches/pypoetry/virtualenvs/sympoly-assignment-umcUDZET-py3.12/lib/python3.12/site-packages/pydantic_core/core_schema.py:3953
../../Library/Caches/pypoetry/virtualenvs/sympoly-assignment-umcUDZET-py3.12/lib/python3.12/site-packages/pydantic_core/core_schema.py:3953
  /Users/daniedagot/Library/Caches/pypoetry/virtualenvs/sympoly-assignment-umcUDZET-py3.12/lib/python3.12/site-packages/pydantic_core/core_schema.py:3953: DeprecationWarning: `general_plain_validator_function` is deprecated, use `with_info_plain_validator_function` instead.
    warnings.warn(

../../Library/Caches/pypoetry/virtualenvs/sympoly-assignment-umcUDZET-py3.12/lib/python3.12/site-packages/beanie/odm/fields.py:150
../../Library/Caches/pypoetry/virtualenvs/sympoly-assignment-umcUDZET-py3.12/lib/python3.12/site-packages/beanie/odm/fields.py:150
../../Library/Caches/pypoetry/virtualenvs/sympoly-assignment-umcUDZET-py3.12/lib/python3.12/site-packages/beanie/odm/fields.py:150
  /Users/daniedagot/Library/Caches/pypoetry/virtualenvs/sympoly-assignment-umcUDZET-py3.12/lib/python3.12/site-packages/beanie/odm/fields.py:150: DeprecationWarning: `general_plain_validator_function` is deprecated, use `with_info_plain_validator_function` instead.
    python_schema=core_schema.general_plain_validator_function(

tests/test_api.py::test_populate_must_work
  /Users/daniedagot/Library/Caches/pypoetry/virtualenvs/sympoly-assignment-umcUDZET-py3.12/lib/python3.12/site-packages/httpx/_client.py:1426: DeprecationWarning: The 'app' shortcut is now deprecated. Use the explicit style 'transport=ASGITransport(app=...)' instead.
    warnings.warn(message, DeprecationWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_api.py::test_populate_must_work - TypeError: 'coroutine' ob...
======================== 1 failed, 9 warnings in 0.55s =========================
